var app=angular.module("assignment3",["ngRoute"]);app.config(["$routeProvider",function(e){e.when("/",{controller:"MainController",templateUrl:"templates/main.html"}).when("/register",{controller:"RegisterController",templateUrl:"templates/register.html"}).otherwise({controller:"NotFoundController",templateUrl:"templates/not_found.html"})}]),app.run(["$rootScope","$location",function(e,t){var n="ws://"+t.host()+":"+t.port(),o=new WebSocket(n);o.onmessage=function(t){var n=JSON.parse(t.data),o="ws:"+n.topic;e.$broadcast(o,n.data)}}]),app.controller("ApplicationController",["$scope","$location","SessionsService",function(e,t,n){e.$on("login",function(t,n){e.currentUser=n}),e.logout=function(){n.logout(),delete e.currentUser,t.path("register")}}]),app.controller("MainController",["$scope","$location","AlbumsService",function(e,t,n){e.albums=[],e.$on("ws:new public album",function(t,n){n.creator!==e.currentUser.username&&(e.albums.unshift(n),e.$apply())}),e.$on("ws:removed album",function(t,n){n.creator!==e.currentUser.username&&(_.remove(e.albums,{_id:n._id}),e.$apply())}),n.query().success(function(t){e.albums=t}).error(function(e,n){401===n&&(t.path("/register"),alert("You need to be logged in to go here!"))}),e.newAlbum={},e.saveAlbum=function(){return e.newAlbum.title&&e.newAlbum.artist?void n.save(e.newAlbum).success(function(t){e.albums.unshift(t),e.newAlbum={}}):void alert("Please enter a title and an artist.")},e.toggleStatus=function(t){n.toggleStatus(t._id,t["public"]).success(function(){_.find(e.albums,function(e){e._id===t._id&&(e["public"]=!e["public"])})})},e.deleteAlbum=function(t){n["delete"](t).success(function(){_.remove(e.albums,{_id:t})})}}]),app.service("AlbumsService",["$http",function(e){this.query=function(){return e.get("/api/albums")},this.save=function(t){return e.post("/api/albums",t)},this.toggleStatus=function(t,n){return e.put("/api/albums/"+t,{"public":!n})},this["delete"]=function(t){return e["delete"]("/api/albums/"+t)}}]),app.controller("RegisterController",["$scope","$location","SessionsService",function(e,t,n){e.newUser={},e.register=function(){return e.newUser.username&&e.newUser.password?void n.register(e.newUser).success(function(){n.login(e.newUser.username,e.newUser.password).then(function(n){e.$emit("login",n.data.user),t.path("/")})}).error(function(e,t){alert(412===t?"Username already exists! Try another.":t+": "+e)}):void alert("Please enter a username and password")},e.login=function(o,r){n.login(o,r).then(function(n){e.$emit("login",n.data.user),t.path("/")})}}]),app.service("SessionsService",["$http",function(e){this.register=function(t){return e.post("/api/users",t)},this.login=function(t,n){var o={username:t,password:n};return e.post("/api/sessions",o).success(function(t){return e.defaults.headers.common["x-auth"]=t.token,t}).error(function(e,t){404===t&&alert("Wrong username or password")})},this.logout=function(){delete e.defaults.headers.common["x-auth"]}}]),app.controller("NotFoundController",["$scope",function(e){e.message="Not found!"}]);
//# sourceMappingURL=data:application/json;base64,